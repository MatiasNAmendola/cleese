#!/usr/bin/env python

# checks that the files here only differ from the "real" python in commented out bits

import sys
import os
import re
from optparse import OptionParser

parser = OptionParser()
parser.add_option("-s", "--stats", action="store_true", help="display statistics")

options, args = parser.parse_args()

# allow external definition of python src tree. use the original value as a
# fallback for now. it can likely be removed later.
BASE = os.environ.get("PYTHON_SRC", "../python-30rc2")

# list of regex that must be matched for file to be checked
MUSTS = [
    re.compile(".+(\.c|\.h)"),
]
# list of regex that will cause file to be ignored (even if matching a pattern in  MUSTS)
IGNORES = [
    re.compile("./oneplusone.c"),
]

for path, dirs, files in os.walk("."):
    for filename in files:
        line_num = 0
        commented = 0
        changed = 0
        exact = 0
        
        ours = os.path.join(path, filename)
        
        ignore = False
        for pattern in MUSTS:
            if not pattern.match(ours):
                ignore = True
                break
        for pattern in IGNORES:
            if pattern.match(ours):
                ignore = True
                break
        if ignore:
            continue
        
        theirs = os.path.join(BASE, path, filename)
        if not os.access(theirs, os.F_OK):
            print "no file corresponding: %s" % ours
            sys.exit(1)
        for our_line, their_line in zip(open(ours), open(theirs)):
            line_num += 1
            if our_line == their_line:
                # we've included their line
                exact += 1
            elif our_line == "// " + their_line:
                # we've commented out their line
                commented += 1
            elif "// " in our_line and our_line.split("// ")[1] == their_line.lstrip():
                # we've changed their line
                changed += 1
            else:
                print "in file %s (line %d), the following lines are inconsistent:" % (ours, line_num)
                our_line = our_line.replace("\\", "\\\\")
                our_line = our_line.replace("\t", "\\t")
                their_line = their_line.replace("\\", "\\\\")
                their_line = their_line.replace("\t", "\\t")
                print our_line, their_line
                sys.exit(2)
        total = commented + changed + exact
        if options.stats:
            print "%40s\t%d\t%d\t%d\t%s%%\t%d" % (ours, commented, changed, exact, (100 * exact / total), total)